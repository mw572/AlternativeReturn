rows <- seq(1,ceiling(0.3*nrow(returns)))
cols <- ncol(returns)+3
optimalpoints <- matrix(nrow=ceiling(0.7*nrow(returns)), ncol=cols)
colnames(optimalpoints) <- c(colnames(returns), "Std.Dev", "Exp.Return", "sharpe")
counter <-1
for (i in seq(1,nrow(returns)*0.6,1)){
rows + i -1 # shift window
returnsample <- returns[rows,]
eff <- eff.frontier(returns=returnsample, short = "no", max.allocation =0.5,
risk.premium.up=0.5, risk.increment =.001) # calc frontier
eff.optimal.point <- eff[eff$sharpe==max(eff$sharpe),] # find optimal point
new <- eff.optimal.point
optimalpoints[counter,] <- new # save optimal result
counter = counter + 1
}
rows <- seq(1,ceiling(0.3*nrow(returns)))
cols <- ncol(returns)+3
optimalpoints <- matrix(nrow=ceiling(0.7*nrow(returns)), ncol=cols)
colnames(optimalpoints) <- c(colnames(returns), "Std.Dev", "Exp.Return", "sharpe")
counter <-1
for (i in seq(1,nrow(returns)*0.6,1)){
rows + i  # shift window
returnsample <- returns[rows,]
eff <- eff.frontier(returns=returnsample, short = "no", max.allocation =0.5,
risk.premium.up=0.5, risk.increment =.001) # calc frontier
eff.optimal.point <- eff[eff$sharpe==max(eff$sharpe),] # find optimal point
new <- eff.optimal.point
optimalpoints[counter,] <- new # save optimal result
counter = counter + 1
}
rows <- seq(1,ceiling(0.3*nrow(returns)))
cols <- ncol(returns)+3
optimalpoints <- matrix(nrow=ceiling(0.7*nrow(returns)), ncol=cols)
colnames(optimalpoints) <- c(colnames(returns), "Std.Dev", "Exp.Return", "sharpe")
for (i in seq(1,nrow(returns)*0.7,1)){
rows + i -1 # shift window
returnsample <- returns[rows,]
eff <- eff.frontier(returns=returnsample, short = "no", max.allocation =0.5,
risk.premium.up=0.5, risk.increment =.001) # calc frontier
eff.optimal.point <- eff[eff$sharpe==max(eff$sharpe),] # find optimal point
optimalpoints[i,"debt"] <- eff.optimal.point[,1] # save optimal result
}
eff.optimal.point[,1]
optimalpoints[1,"debt"]
View(optimalpoints)
optimalpoints[1,"Debt"]
rows <- seq(1,ceiling(0.3*nrow(returns)))
cols <- ncol(returns)+3
optimalpoints <- matrix(nrow=ceiling(0.7*nrow(returns)), ncol=cols)
colnames(optimalpoints) <- c(colnames(returns), "Std.Dev", "Exp.Return", "sharpe")
for (i in seq(1,nrow(returns)*0.7,1)){
rows + i -1 # shift window
returnsample <- returns[rows,]
eff <- eff.frontier(returns=returnsample, short = "no", max.allocation =0.5,
risk.premium.up=0.5, risk.increment =.001) # calc frontier
eff.optimal.point <- eff[eff$sharpe==max(eff$sharpe),] # find optimal point
optimalpoints[i,"Debt"] <- eff.optimal.point[,1] # save optimal result
}
View(optimalpoints)
rows <- seq(1,ceiling(0.3*nrow(returns)))
cols <- ncol(returns)+3
optimalpoints <- matrix(nrow=ceiling(0.7*nrow(returns)), ncol=cols)
colnames(optimalpoints) <- c(colnames(returns), "Std.Dev", "Exp.Return", "sharpe")
for (i in seq(1,nrow(returns)*0.7,1)){
rows + i -1 # shift window
returnsample <- returns[rows,]
eff <- eff.frontier(returns=returnsample, short = "no", max.allocation =0.5,
risk.premium.up=0.5, risk.increment =.001) # calc frontier
eff.optimal.point <- eff[eff$sharpe==max(eff$sharpe),] # find optimal point
optimalpoints[i,1:8] <- eff.optimal.point[,1:8] # save optimal result
}
rows <- seq(1,ceiling(0.3*nrow(returns)))
cols <- ncol(returns)+3
optimalpoints <- matrix(nrow=ceiling(0.7*nrow(returns)), ncol=cols)
colnames(optimalpoints) <- c(colnames(returns), "Std.Dev", "Exp.Return", "sharpe")
for (i in seq(1,nrow(returns)*0.7,1)){
rows + i -1 # shift window
returnsample <- returns[rows,]
eff <- eff.frontier(returns=returnsample, short = "no", max.allocation =0.5,
risk.premium.up=0.5, risk.increment =.001) # calc frontier
eff.optimal.point <- eff[eff$sharpe==max(eff$sharpe),] # find optimal point
optimalpoints[i,1] <- eff.optimal.point[,1] # save optimal result
}
rows <- seq(1,ceiling(0.3*nrow(returns)))
cols <- ncol(returns)+3
optimalpoints <- matrix(nrow=ceiling(0.7*nrow(returns)), ncol=cols)
colnames(optimalpoints) <- c(colnames(returns), "Std.Dev", "Exp.Return", "sharpe")
for (i in seq(1,nrow(returns)*0.7,1)){
rows + i -1 # shift window
returnsample <- returns[rows,]
eff <- eff.frontier(returns=returnsample, short = "no", max.allocation =0.5,
risk.premium.up=0.5, risk.increment =.001) # calc frontier
eff.optimal.point <- eff[eff$sharpe==max(eff$sharpe),] # find optimal point
optimalpoints[i,c(1:8)] <- eff.optimal.point[,c(1:8)] # save optimal result
}
rows <- seq(1,ceiling(0.3*nrow(returns)))
cols <- ncol(returns)+3
optimalpoints <- matrix(nrow=ceiling(0.7*nrow(returns)), ncol=cols)
colnames(optimalpoints) <- c(colnames(returns), "Std.Dev", "Exp.Return", "sharpe")
for (i in seq(1,nrow(returns)*0.7,1)){
rows + i -1 # shift window
returnsample <- returns[rows,]
eff <- eff.frontier(returns=returnsample, short = "no", max.allocation =0.5,
risk.premium.up=0.5, risk.increment =.001) # calc frontier
eff.optimal.point <- eff[eff$sharpe==max(eff$sharpe),] # find optimal point
optimalpoints[i,1] <- eff.optimal.point[,1] # save optimal result
optimalpoints[i,2] <- eff.optimal.point[,2]
optimalpoints[i,3] <- eff.optimal.point[,3]
optimalpoints[i,4] <- eff.optimal.point[,4]
}
rows <- seq(1,ceiling(0.3*nrow(returns)))
cols <- ncol(returns)+3
optimalpoints <- matrix(nrow=ceiling(0.7*nrow(returns)), ncol=cols)
colnames(optimalpoints) <- c(colnames(returns), "Std.Dev", "Exp.Return", "sharpe")
for (i in seq(1,nrow(returns)*0.7,1)){
rows + i -1 # shift window
returnsample <- returns[rows,]
eff <- eff.frontier(returns=returnsample, short = "no", max.allocation =0.5,
risk.premium.up=0.5, risk.increment =.001) # calc frontier
eff.optimal.point <- eff[eff$sharpe==max(eff$sharpe),] # find optimal point
optimalpoints[i,1] <- eff.optimal.point[,1] # save optimal result
optimalpoints[i,2] <- eff.optimal.point[,2]
optimalpoints[i,3] <- eff.optimal.point[,3]
optimalpoints[i,4] <- eff.optimal.point[,4]
optimalpoints[i,5] <- eff.optimal.point[,5]
optimalpoints[i,6] <- eff.optimal.point[,6]
optimalpoints[i,7] <- eff.optimal.point[,7]
optimalpoints[i,8] <- eff.optimal.point[,8]
}
rows <- seq(1,ceiling(0.3*nrow(returns)))
cols <- ncol(returns)+3
optimalpoints <- matrix(nrow=ceiling(0.7*nrow(returns)), ncol=cols)
colnames(optimalpoints) <- c(colnames(returns), "Std.Dev", "Exp.Return", "sharpe")
for (i in seq(1,nrow(returns)*0.7,1)){
rows + i -1 # shift window
returnsample <- returns[rows,]
eff <- eff.frontier(returns=returnsample, short = "no", max.allocation =0.5,
risk.premium.up=0.5, risk.increment =.001) # calc frontier
eff.optimal.point <- eff[eff$sharpe==max(eff$sharpe),] # find optimal point
optimalpoints[i,1:8] <- eff.optimal.point
optimalpoints[i,1] <- eff.optimal.point[,1] # save optimal result
optimalpoints[i,2] <- eff.optimal.point[,2]
optimalpoints[i,3] <- eff.optimal.point[,3]
optimalpoints[i,4] <- eff.optimal.point[,4]
optimalpoints[i,5] <- eff.optimal.point[,5]
optimalpoints[i,6] <- eff.optimal.point[,6]
optimalpoints[i,7] <- eff.optimal.point[,7]
optimalpoints[i,8] <- eff.optimal.point[,8]
}
rows <- seq(1,ceiling(0.3*nrow(returns)))
cols <- ncol(returns)+3
optimalpoints <- matrix(nrow=ceiling(0.7*nrow(returns)), ncol=cols)
colnames(optimalpoints) <- c(colnames(returns), "Std.Dev", "Exp.Return", "sharpe")
for (i in seq(1,nrow(returns)*0.7,1)){
rows + i -1 # shift window
returnsample <- returns[rows,]
eff <- eff.frontier(returns=returnsample, short = "no", max.allocation =0.5,
risk.premium.up=0.5, risk.increment =.001) # calc frontier
eff.optimal.point <- eff[eff$sharpe==max(eff$sharpe),] # find optimal point
optimalpoints[i,1:8] <- eff.optimal.point
}
rows <- seq(1,ceiling(0.3*nrow(returns)))
cols <- ncol(returns)+3
optimalpoints <- matrix(nrow=ceiling(0.7*nrow(returns)), ncol=cols)
colnames(optimalpoints) <- c(colnames(returns), "Std.Dev", "Exp.Return", "sharpe")
for (i in seq(1,nrow(returns)*0.7,1)){
rows + i -1 # shift window
returnsample <- returns[rows,]
eff <- eff.frontier(returns=returnsample, short = "no", max.allocation =0.5,
risk.premium.up=0.5, risk.increment =.001) # calc frontier
eff.optimal.point <- eff[eff$sharpe==max(eff$sharpe),] # find optimal point
#something is not working here cannot use "optimalpoints[i,1:8] <- eff.optimal.point"...
optimalpoints[i,1] <- eff.optimal.point[,1]
optimalpoints[i,2] <- eff.optimal.point[,2]
optimalpoints[i,3] <- eff.optimal.point[,3]
optimalpoints[i,4] <- eff.optimal.point[,4]
optimalpoints[i,5] <- eff.optimal.point[,5]
optimalpoints[i,6] <- eff.optimal.point[,6]
optimalpoints[i,7] <- eff.optimal.point[,7]
optimalpoints[i,8] <- eff.optimal.point[,8]
}
View(optimalpoints)
debugSource('~/Documents/Repos/AlternativeReturn/MVO/MVO_AR.R')
returnsample
eff
i
rows
rows <- seq(1,ceiling(0.3*nrow(returns)))
cols <- ncol(returns)+3
optimalpoints <- matrix(nrow=ceiling(0.7*nrow(returns)), ncol=cols)
colnames(optimalpoints) <- c(colnames(returns), "Std.Dev", "Exp.Return", "sharpe")
for (i in seq(1,nrow(returns)*0.7,1)){
rows + i # shift window
returnsample <- returns[rows,]
eff <- eff.frontier(returns=returnsample, short = "no", max.allocation =0.5,
risk.premium.up=0.5, risk.increment =.001) # calc frontier
eff.optimal.point <- eff[eff$sharpe==max(eff$sharpe),] # find optimal point
#something is not working here cannot use "optimalpoints[i,1:8] <- eff.optimal.point"...
optimalpoints[i,1] <- eff.optimal.point[,1]
optimalpoints[i,2] <- eff.optimal.point[,2]
optimalpoints[i,3] <- eff.optimal.point[,3]
optimalpoints[i,4] <- eff.optimal.point[,4]
optimalpoints[i,5] <- eff.optimal.point[,5]
optimalpoints[i,6] <- eff.optimal.point[,6]
optimalpoints[i,7] <- eff.optimal.point[,7]
optimalpoints[i,8] <- eff.optimal.point[,8]
}
View(optimalpoints)
debugSource('~/Documents/Repos/AlternativeReturn/MVO/MVO_AR.R')
rows
rows
rows <- seq(1,ceiling(0.3*nrow(returns)))
cols <- ncol(returns)+3
optimalpoints <- matrix(nrow=ceiling(0.7*nrow(returns)), ncol=cols)
colnames(optimalpoints) <- c(colnames(returns), "Std.Dev", "Exp.Return", "sharpe")
for (i in seq(1,nrow(returns)*0.7,1)){
rows = rows + i # shift window
returnsample <- returns[rows,]
eff <- eff.frontier(returns=returnsample, short = "no", max.allocation =0.5,
risk.premium.up=0.5, risk.increment =.001) # calc frontier
eff.optimal.point <- eff[eff$sharpe==max(eff$sharpe),] # find optimal point
#something is not working here cannot use "optimalpoints[i,1:8] <- eff.optimal.point"...
optimalpoints[i,1] <- eff.optimal.point[,1]
optimalpoints[i,2] <- eff.optimal.point[,2]
optimalpoints[i,3] <- eff.optimal.point[,3]
optimalpoints[i,4] <- eff.optimal.point[,4]
optimalpoints[i,5] <- eff.optimal.point[,5]
optimalpoints[i,6] <- eff.optimal.point[,6]
optimalpoints[i,7] <- eff.optimal.point[,7]
optimalpoints[i,8] <- eff.optimal.point[,8]
}
rows <- seq(1,ceiling(0.3*nrow(returns)))
cols <- ncol(returns)+3
optimalpoints <- matrix(nrow=ceiling(0.7*nrow(returns)), ncol=cols)
colnames(optimalpoints) <- c(colnames(returns), "Std.Dev", "Exp.Return", "sharpe")
for (i in seq(1,nrow(returns)*0.7-1,1)){
rows = rows + i # shift window
returnsample <- returns[rows,]
eff <- eff.frontier(returns=returnsample, short = "no", max.allocation =0.5,
risk.premium.up=0.5, risk.increment =.001) # calc frontier
eff.optimal.point <- eff[eff$sharpe==max(eff$sharpe),] # find optimal point
#something is not working here cannot use "optimalpoints[i,1:8] <- eff.optimal.point"...
optimalpoints[i,1] <- eff.optimal.point[,1]
optimalpoints[i,2] <- eff.optimal.point[,2]
optimalpoints[i,3] <- eff.optimal.point[,3]
optimalpoints[i,4] <- eff.optimal.point[,4]
optimalpoints[i,5] <- eff.optimal.point[,5]
optimalpoints[i,6] <- eff.optimal.point[,6]
optimalpoints[i,7] <- eff.optimal.point[,7]
optimalpoints[i,8] <- eff.optimal.point[,8]
}
debugSource('~/Documents/Repos/AlternativeReturn/MVO/MVO_AR.R')
rows
rows
rows
rows <- seq(1,ceiling(0.3*nrow(returns)))
cols <- ncol(returns)+3
optimalpoints <- matrix(nrow=ceiling(0.7*nrow(returns)), ncol=cols)
colnames(optimalpoints) <- c(colnames(returns), "Std.Dev", "Exp.Return", "sharpe")
for (i in seq(1,nrow(returns)*0.7,1)){
returnsample <- returns[rows,]
eff <- eff.frontier(returns=returnsample, short = "no", max.allocation =0.5,
risk.premium.up=0.5, risk.increment =.001) # calc frontier
eff.optimal.point <- eff[eff$sharpe==max(eff$sharpe),] # find optimal point
#something is not working here cannot use "optimalpoints[i,1:8] <- eff.optimal.point"...
optimalpoints[i,1] <- eff.optimal.point[,1]
optimalpoints[i,2] <- eff.optimal.point[,2]
optimalpoints[i,3] <- eff.optimal.point[,3]
optimalpoints[i,4] <- eff.optimal.point[,4]
optimalpoints[i,5] <- eff.optimal.point[,5]
optimalpoints[i,6] <- eff.optimal.point[,6]
optimalpoints[i,7] <- eff.optimal.point[,7]
optimalpoints[i,8] <- eff.optimal.point[,8]
rows = rows + 1
}
View(optimalpoints)
rows <- seq(1,ceiling(0.3*nrow(returns)))
cols <- ncol(returns)+3
optimalpoints <- matrix(nrow=ceiling(0.7*nrow(returns)), ncol=cols)
colnames(optimalpoints) <- c(colnames(returns), "Std.Dev", "Exp.Return", "sharpe")
for (i in seq(1,nrow(returns)*0.7,1)){
returnsample <- returns[rows,]
eff <- eff.frontier(returns=returnsample, short = "no", max.allocation =0.5,
risk.premium.up=0.5, risk.increment =.001) # calc frontier
eff.optimal.point <- eff[eff$sharpe==max(eff$sharpe),] # find optimal point
#something is not working here cannot use "optimalpoints[i,1:8] <- eff.optimal.point"...
optimalpoints[i,1:8] <- eff.optimal.point
rows = rows + 1
}
rows <- seq(1,ceiling(0.3*nrow(returns)))
cols <- ncol(returns)+3
optimalpoints <- matrix(nrow=ceiling(0.7*nrow(returns)), ncol=cols)
colnames(optimalpoints) <- c(colnames(returns), "Std.Dev", "Exp.Return", "sharpe")
for (i in seq(1,nrow(returns)*0.7,1)){
returnsample <- returns[rows,]
eff <- eff.frontier(returns=returnsample, short = "no", max.allocation =0.5,
risk.premium.up=0.5, risk.increment =.001) # calc frontier
eff.optimal.point <- eff[eff$sharpe==max(eff$sharpe),] # find optimal point
#something is not working here cannot use "optimalpoints[i,1:8] <- eff.optimal.point"...
optimalpoints[i,] <- eff.optimal.point
rows = rows + 1
}
# Run the eff.frontier function based on no short and 50% alloc. restrictions
eff <- eff.frontier(returns=returns, short="no", max.allocation=0.5,
risk.premium.up=0.5, risk.increment=.001)
# Find the optimal portfolios
eff.optimal.point <- eff[eff$sharpe==max(eff$sharpe),]
eff.tenpercent <- eff[eff$sharpe==max(eff$sharpe[eff$Exp.Return>((1.1^(1/12))-1)]),]
# graph efficient frontier
# Start with color scheme
ealred <- "#7D110C"
ealtan <- "#CDC4B6"
eallighttan <- "#F7F6F0"
ealdark <- "#423C30"
#### Plot it
ggplot(eff, aes(x=Std.Dev, y=Exp.Return)) + geom_point(alpha=.1, color=ealdark) +
#Plotting simulations
geom_point(data=optimalpoints, aes(x=Std.Dev, y=Exp.Return, label=sharpe,
colour,ealtan, size=2))
#Plotting the optimal portfolio first
geom_point(data=eff.optimal.point, aes(x=Std.Dev, y=Exp.Return, label=sharpe),
color=ealred, size=5) +
annotate(geom="text", x=eff.optimal.point$Std.Dev,
y=eff.optimal.point$Exp.Return,
label=paste("Optimal Portfolio\nRisk: ",
round(((1+eff.optimal.point$Std.Dev)^(12)-1)*100, digits=2),"%\nReturn: ",
round(((1+eff.optimal.point$Exp.Return)^(12)-1)*100, digits=2),"%\nSharpe: ",
round(eff.optimal.point$sharpe*sqrt(12), digits=4), sep=""),
hjust=-0.2, vjust=-0.2) +
#Plotting the optimised 10% return portfolio
geom_point(data=eff.tenpercent, aes(x=Std.Dev, y=Exp.Return, label=sharpe),
color=ealdark, size=5) +
annotate(geom="text", x=eff.tenpercent$Std.Dev,
y=eff.tenpercent$Exp.Return,
label=paste("10% Return Optimised\nRisk: ",
round(((1+eff.tenpercent$Std.Dev)^(12)-1)*100, digits=2),"%\nReturn: ",
round(((1+eff.tenpercent$Exp.Return)^(12)-1)*100, digits=2),"%\nSharpe: ",
round(eff.tenpercent$sharpe*sqrt(12), digits=4), sep=""),
hjust=-0.2, vjust=-0.2) +
#End plotting
ggtitle("Efficient Frontier and Optimal Portfolio by Sharpe Ratio") +
labs(x="Monthly Risk (standard deviation of portfolio)", y="Monthly Return") +
theme(panel.background=element_rect(fill=eallighttan),
text=element_text(color=ealdark),
plot.title=element_text(size=24, color=ealred))
ggplot(eff, aes(x=Std.Dev, y=Exp.Return)) + geom_point(alpha=.1, color=ealdark) +
#Plotting simulations
geom_point(data=optimalpoints, aes(x=Std.Dev, y=Exp.Return, label=sharpe,
colour,ealtan, size=2)) +
#Plotting the optimal portfolio first
geom_point(data=eff.optimal.point, aes(x=Std.Dev, y=Exp.Return, label=sharpe),
color=ealred, size=5) +
annotate(geom="text", x=eff.optimal.point$Std.Dev,
y=eff.optimal.point$Exp.Return,
label=paste("Optimal Portfolio\nRisk: ",
round(((1+eff.optimal.point$Std.Dev)^(12)-1)*100, digits=2),"%\nReturn: ",
round(((1+eff.optimal.point$Exp.Return)^(12)-1)*100, digits=2),"%\nSharpe: ",
round(eff.optimal.point$sharpe*sqrt(12), digits=4), sep=""),
hjust=-0.2, vjust=-0.2) +
#Plotting the optimised 10% return portfolio
geom_point(data=eff.tenpercent, aes(x=Std.Dev, y=Exp.Return, label=sharpe),
color=ealdark, size=5) +
annotate(geom="text", x=eff.tenpercent$Std.Dev,
y=eff.tenpercent$Exp.Return,
label=paste("10% Return Optimised\nRisk: ",
round(((1+eff.tenpercent$Std.Dev)^(12)-1)*100, digits=2),"%\nReturn: ",
round(((1+eff.tenpercent$Exp.Return)^(12)-1)*100, digits=2),"%\nSharpe: ",
round(eff.tenpercent$sharpe*sqrt(12), digits=4), sep=""),
hjust=-0.2, vjust=-0.2) +
#End plotting
ggtitle("Efficient Frontier and Optimal Portfolio by Sharpe Ratio") +
labs(x="Monthly Risk (standard deviation of portfolio)", y="Monthly Return") +
theme(panel.background=element_rect(fill=eallighttan),
text=element_text(color=ealdark),
plot.title=element_text(size=24, color=ealred))
ggplot(eff, aes(x=Std.Dev, y=Exp.Return)) + geom_point(alpha=.1, color=ealdark) +
ggplot(optimalpoints, aes(x=Std.Dev, y=Exp.Return)) + geom_poin(alpha=.1, colour=ealtan, size=2) +
#Plotting the optimal portfolio first
geom_point(data=eff.optimal.point, aes(x=Std.Dev, y=Exp.Return, label=sharpe),
color=ealred, size=5) +
annotate(geom="text", x=eff.optimal.point$Std.Dev,
y=eff.optimal.point$Exp.Return,
label=paste("Optimal Portfolio\nRisk: ",
round(((1+eff.optimal.point$Std.Dev)^(12)-1)*100, digits=2),"%\nReturn: ",
round(((1+eff.optimal.point$Exp.Return)^(12)-1)*100, digits=2),"%\nSharpe: ",
round(eff.optimal.point$sharpe*sqrt(12), digits=4), sep=""),
hjust=-0.2, vjust=-0.2) +
#Plotting the optimised 10% return portfolio
geom_point(data=eff.tenpercent, aes(x=Std.Dev, y=Exp.Return, label=sharpe),
color=ealdark, size=5) +
annotate(geom="text", x=eff.tenpercent$Std.Dev,
y=eff.tenpercent$Exp.Return,
label=paste("10% Return Optimised\nRisk: ",
round(((1+eff.tenpercent$Std.Dev)^(12)-1)*100, digits=2),"%\nReturn: ",
round(((1+eff.tenpercent$Exp.Return)^(12)-1)*100, digits=2),"%\nSharpe: ",
round(eff.tenpercent$sharpe*sqrt(12), digits=4), sep=""),
hjust=-0.2, vjust=-0.2) +
#End plotting
ggtitle("Efficient Frontier and Optimal Portfolio by Sharpe Ratio") +
labs(x="Monthly Risk (standard deviation of portfolio)", y="Monthly Return") +
theme(panel.background=element_rect(fill=eallighttan),
text=element_text(color=ealdark),
plot.title=element_text(size=24, color=ealred))
rows <- seq(1,ceiling(0.3*nrow(returns)))
cols <- ncol(returns)+3
optimalpoints <- matrix(nrow=ceiling(0.7*nrow(returns)), ncol=cols)
colnames(optimalpoints) <- c(colnames(returns), "Std.Dev", "Exp.Return", "sharpe")
for (i in seq(1,nrow(returns)*0.7,1)){
returnsample <- returns[rows,]
eff <- eff.frontier(returns=returnsample, short = "no", max.allocation =0.5,
risk.premium.up=0.5, risk.increment =.001) # calc frontier
eff.optimal.point <- eff[eff$sharpe==max(eff$sharpe),] # find optimal point
#something is not working here cannot use "optimalpoints[i,1:8] <- eff.optimal.point"...
optimalpoints[i,1] <- eff.optimal.point[,1]
optimalpoints[i,2] <- eff.optimal.point[,2]
optimalpoints[i,3] <- eff.optimal.point[,3]
optimalpoints[i,4] <- eff.optimal.point[,4]
optimalpoints[i,5] <- eff.optimal.point[,5]
optimalpoints[i,6] <- eff.optimal.point[,6]
optimalpoints[i,7] <- eff.optimal.point[,7]
optimalpoints[i,8] <- eff.optimal.point[,8]
rows = rows + 1
}
# Run the eff.frontier function based on no short and 50% alloc. restrictions
eff <- eff.frontier(returns=returns, short="no", max.allocation=0.5,
risk.premium.up=0.5, risk.increment=.001)
# Find the optimal portfolios
eff.optimal.point <- eff[eff$sharpe==max(eff$sharpe),]
eff.tenpercent <- eff[eff$sharpe==max(eff$sharpe[eff$Exp.Return>((1.1^(1/12))-1)]),]
# graph efficient frontier
# Start with color scheme
ealred <- "#7D110C"
ealtan <- "#CDC4B6"
eallighttan <- "#F7F6F0"
ealdark <- "#423C30"
#### Plot it
ggplot(eff, aes(x=Std.Dev, y=Exp.Return)) + geom_point(alpha=.1, color=ealdark) +
#Plotting simulations
geom_point(data=optimalpoints, aes(x=Std.Dev, y=Exp.Return, label=sharpe,
colour,ealtan, size=2)) +
#Plotting the optimal portfolio first
geom_point(data=eff.optimal.point, aes(x=Std.Dev, y=Exp.Return, label=sharpe),
color=ealred, size=5) +
annotate(geom="text", x=eff.optimal.point$Std.Dev,
y=eff.optimal.point$Exp.Return,
label=paste("Optimal Portfolio\nRisk: ",
round(((1+eff.optimal.point$Std.Dev)^(12)-1)*100, digits=2),"%\nReturn: ",
round(((1+eff.optimal.point$Exp.Return)^(12)-1)*100, digits=2),"%\nSharpe: ",
round(eff.optimal.point$sharpe*sqrt(12), digits=4), sep=""),
hjust=-0.2, vjust=-0.2) +
#Plotting the optimised 10% return portfolio
geom_point(data=eff.tenpercent, aes(x=Std.Dev, y=Exp.Return, label=sharpe),
color=ealdark, size=5) +
annotate(geom="text", x=eff.tenpercent$Std.Dev,
y=eff.tenpercent$Exp.Return,
label=paste("10% Return Optimised\nRisk: ",
round(((1+eff.tenpercent$Std.Dev)^(12)-1)*100, digits=2),"%\nReturn: ",
round(((1+eff.tenpercent$Exp.Return)^(12)-1)*100, digits=2),"%\nSharpe: ",
round(eff.tenpercent$sharpe*sqrt(12), digits=4), sep=""),
hjust=-0.2, vjust=-0.2) +
#End plotting
ggtitle("Efficient Frontier and Optimal Portfolio by Sharpe Ratio") +
labs(x="Monthly Risk (standard deviation of portfolio)", y="Monthly Return") +
theme(panel.background=element_rect(fill=eallighttan),
text=element_text(color=ealdark),
plot.title=element_text(size=24, color=ealred))
eff <- rbind(eff,optimalpoints) #bind them
ealred <- "#7D110C"
ealtan <- "#CDC4B6"
eallighttan <- "#F7F6F0"
ealdark <- "#423C30"
#### Plot it
ggplot(eff, aes(x=Std.Dev, y=Exp.Return)) + geom_point(alpha=.1, color=ealdark) +
#Plotting the optimal portfolio first
geom_point(data=eff.optimal.point, aes(x=Std.Dev, y=Exp.Return, label=sharpe),
color=ealred, size=5) +
annotate(geom="text", x=eff.optimal.point$Std.Dev,
y=eff.optimal.point$Exp.Return,
label=paste("Optimal Portfolio\nRisk: ",
round(((1+eff.optimal.point$Std.Dev)^(12)-1)*100, digits=2),"%\nReturn: ",
round(((1+eff.optimal.point$Exp.Return)^(12)-1)*100, digits=2),"%\nSharpe: ",
round(eff.optimal.point$sharpe*sqrt(12), digits=4), sep=""),
hjust=-0.2, vjust=-0.2) +
#Plotting the optimised 10% return portfolio
geom_point(data=eff.tenpercent, aes(x=Std.Dev, y=Exp.Return, label=sharpe),
color=ealdark, size=5) +
annotate(geom="text", x=eff.tenpercent$Std.Dev,
y=eff.tenpercent$Exp.Return,
label=paste("10% Return Optimised\nRisk: ",
round(((1+eff.tenpercent$Std.Dev)^(12)-1)*100, digits=2),"%\nReturn: ",
round(((1+eff.tenpercent$Exp.Return)^(12)-1)*100, digits=2),"%\nSharpe: ",
round(eff.tenpercent$sharpe*sqrt(12), digits=4), sep=""),
hjust=-0.2, vjust=-0.2) +
#End plotting
ggtitle("Efficient Frontier and Optimal Portfolio by Sharpe Ratio") +
labs(x="Monthly Risk (standard deviation of portfolio)", y="Monthly Return") +
theme(panel.background=element_rect(fill=eallighttan),
text=element_text(color=ealdark),
plot.title=element_text(size=24, color=ealred))
meanoptimal <- mean(optimalpoints)
meanoptimal
meanoptimal[1,1:8] <- mean(optimalpoints)
?mean
meanoptimal <- colmean(optimalpoints)
meanoptimal <- colmeans(optimalpoints)
meanoptimal <- colMeans(optimalpoints)
meanoptimal
sum(meanoptimal[,2:5])
meanoptimal[,2:5]
meanoptimal[1,2:5]
meanoptimal[,c(2:5)]
meanoptimal[,c(2,3)]
